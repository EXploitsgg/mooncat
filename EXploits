local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Moon Cat Method",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Get the key at discord",
   LoadingSubtitle = "by EXploits",
   ShowText = "EXPLOITS", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Moon Hub"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "KB9uREmaan", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "EXploits key system",
      Subtitle = "Get key at discord.gg/KB9uREmaan",
      Note = "---", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"MOONHUBEARLY"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Main", 85384494479996) -- Title, Image

local Players = game:GetService("Players")
local Button = Tab:CreateButton({
  Name = "TP moon cats to one place",
  Callback = function()
    local function log(...) print("[TPMoonCats]", ...) end

    -- 1. Get LocalPlayer
    local player = Players.LocalPlayer
    if not player then
      return log("✖ LocalPlayer not found")
    end
    log("✔ LocalPlayer:", player.Name)

    -- 2. Locate the Torso target
    local ok, targetTorso = pcall(function()
      return workspace.PetsPhysical
                     .PetMover["{c5336ed7-c756-4051-8a5d-95bfdf3381b6}"]
                     :FindFirstChild("Torso")
    end)
    if not ok or not targetTorso or not targetTorso:IsA("BasePart") then
      return log("✖ Couldn’t find Torso on mover instance")
    end
    local destPos = targetTorso.Position
    log("✔ Destination torso at", destPos)

    -- 3. Scan for Moon Cat models
    for _, model in ipairs(workspace:GetDescendants()) do
      if model:IsA("Model") and model.Name == "Moon Cat" then
        local ownerTag = model:FindFirstChild("Owner")
        if ownerTag then
          log("→ Found Moon Cat:", model, "Owner =", ownerTag.Value)
        else
          log("→ Skipping Moon Cat with no Owner tag:", model)
        end

        if ownerTag and ownerTag.Value == player.UserId then
          -- 4a. Ensure it has a PrimaryPart
          if not model.PrimaryPart then
            local root = model:FindFirstChild("Torso")
                     or model:FindFirstChild("HumanoidRootPart")
                     or model:FindFirstChildWhichIsA("BasePart")
            model.PrimaryPart = root
            log(root and "✔ Assigned PrimaryPart:" or "✖ Couldn’t assign PrimaryPart", root)
          end

          -- 4b. Teleport it
          if model.PrimaryPart then
            local offset = Vector3.new(math.random(-2,2), 0, math.random(-2,2))
            local success, err = pcall(function()
              model:PivotTo(CFrame.new(destPos + offset))
            end)
            if success then
              log("✔ Teleported", model, "to", destPos + offset)
            else
              log("✖ PivotTo failed for", model, "—", err)
            end
          else
            log("✖ No PrimaryPart, skipping teleport for", model)
          end
        end
      end
    end
  end,
})
